import sqlalchemy as sa

from sqlalchemy.schema import CreateColumn
from sqlalchemy.ext.compiler import compiles

# SQLAlchemy doesn't support PosgreSQL's new IDENTITY column feature, so we'll
# watch for any SERIAL columns and rewrite them. This approach was lifted from
# their PG-specific documentation.
# https://docs.sqlalchemy.org/en/13/dialects/postgresql.html#postgresql-10-identity-columns
@compiles(CreateColumn, 'postgresql')
def use_identity(element, compiler, **kwargs):
    text = compiler.visit_create_column(element, **kwargs)
    text = text.replace('SERIAL', 'INT GENERATED BY DEFAULT AS IDENTITY')
    return text


metadata = sa.MetaData(naming_convention={
    'ix': 'ix__%(column_0_label)s',
    'uq': 'uq__%(table_name)s__%(column_0_N_name)s',
    'ck': 'ck__%(table_name)s__%(constraint_name)s',
    'fk': 'fk__%(table_name)s__%(column_0_N_name)s__%(referred_table_name)s',
    'pk': 'pk__%(table_name)s'
})


scene = sa.Table(
    'scene',
    metadata,
    sa.Column('id', sa.Integer, primary_key=True),
    sa.Column('channel_id', sa.Integer, nullable=False, unique=True),
    sa.Column('description', sa.String()),
)

scene_aspects = sa.Table(
    'scene_aspects',
    metadata,
    sa.Column('id', sa.Integer, primary_key=True),
    sa.Column('scene_id', sa.Integer, sa.ForeignKey('scene.id'), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
)

